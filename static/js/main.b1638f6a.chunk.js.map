{"version":3,"sources":["components/header.js","components/game.js","App.js","serviceWorker.js","index.js"],"names":["styles","navbarStyle","background","height","fontSize","fontWeight","color","margin","Header","react_default","a","createElement","style","className","this","props","score","topScore","Component","cats","border","Game","state","data","Data","setState","index","console","log","newData","gameOver","clicked","i","length","sort","Math","random","updateScore","_this2","map","item","src","image","key","alt","width","onClick","handleClick","App","finished","newScore","_this","header","game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNACMA,SAAS,CACbC,YAAa,CACXC,WAAY,QACZC,OAAQ,QACRC,SAAU,OACVC,WAAY,OACZC,MAAM,QACNC,OAAO,UAqBIC,mLAbX,OACEC,EAAAC,EAAAC,cAAA,OAAMC,MAAOZ,EAAOC,YAAaY,UAAU,UACzCJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAAf,eACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAAf,4BACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAAf,UAA+BC,KAAKC,MAAMC,MAA1C,KACAP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAAf,cAAoCC,KAAKC,MAAME,mBAVpCC,oBCRflB,EAAS,CACbmB,KAAM,CACJhB,OAAQ,QACRC,SAAU,OACVC,WAAY,OACZC,MAAM,QACNc,OAAO,kBAmDIC,6MA7CbC,MAAQ,CACNC,KAAMC,EACNR,MAAO,EACPC,SAAU,sFAGVH,KAAKW,SAAS,CAAEF,KAAKC,wCAGXE,GAEVC,QAAQC,IAAIF,GAEZ,IAAIG,EAAQf,KAAKQ,MAAMC,KACnBO,GAAS,EAQb,GAPGD,EAAQH,GAAOK,UAChBD,GAAS,EACTH,QAAQC,IAAI,wBAEdC,EAAQH,GAAOK,SAAQ,EAGpBD,EAED,IAAI,IAAIE,EAAE,EAAEA,EAAEH,EAAQI,OAAOD,IAC3BH,EAAQG,GAAGD,SAAQ,EAGvBjB,KAAKW,SAAS,CAAEF,KAAKM,EAAQK,KAAK,iBAAM,GAAMC,KAAKC,aACnDtB,KAAKC,MAAMsB,YAAYP,oCAGhB,IAAAQ,EAAAxB,KACP,OAEEL,EAAAC,EAAAC,cAAA,WAEIG,KAAKQ,MAAMC,KAAKgB,IAAI,SAACC,EAAMd,GAAP,OAClBjB,EAAAC,EAAAC,cAAA,OAAK8B,IAAKD,EAAKE,MAAO9B,MAAOZ,EAAOmB,KAAMwB,IAAKjB,EAAOb,UAAU,OAAO+B,IAAI,MAAMzC,OAAO,MAAM0C,MAAM,MAAMC,QAAS,kBAAMR,EAAKS,YAAYrB,gBAxCnIR,aCuBJ8B,6MA9Bb1B,MAAQ,CACNN,MAAM,EACNC,SAAS,KAEXoB,YAAe,SAAAY,GAEb,GADAtB,QAAQC,IAAI,cAAcqB,GACvBA,EAAS,CACX,IAAIC,EAAWC,EAAK7B,MAAML,SACvBkC,EAAK7B,MAAMN,MAAMkC,IAClBA,EAASC,EAAK7B,MAAMN,OAEtBmC,EAAK1B,SAAS,CAACR,SAASiC,IACxBC,EAAK1B,SAAS,CAACT,MAAM,QAElB,CACH,IAAIkC,EAAWC,EAAK7B,MAAMN,MAAQ,EAClCmC,EAAK1B,SAAS,CAACT,MAAMkC,8EAKtB,OACEzC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACfJ,EAAAC,EAAAC,cAACyC,EAAD,CAAQpC,MAASF,KAAKQ,MAAMN,MAAOC,SAAUH,KAAKQ,MAAML,WACxDR,EAAAC,EAAAC,cAAC0C,EAAD,CAAMhB,YAAevB,KAAKuB,sBAzBdnB,aCMEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b1638f6a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nconst styles = {\n  navbarStyle: {\n    background: \"green\",\n    height: \"100px\",\n    fontSize: \"25px\",\n    fontWeight: \"bold\",\n    color:\"White\",\n    margin:\"20px\"\n  }\n};\n\nclass Header extends Component {\n \n\n  render() {\n    return (\n      <nav  style={styles.navbarStyle} className=\"navbar\">\n        <div className=\"row\">\n          <div className=\"col-2\">CLICKY GAME</div>\n          <div className=\"col-5\">Click an Image to begin!</div>\n          <div className=\"col-2\">Score: {this.props.score} </div>\n          <div className=\"col-3\" >Top Score: {this.props.topScore}</div>\n        </div>\n      </nav>)\n  }\n}\n\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport Data from \"../data.json\";\n\n\nconst styles = {\n  cats: {\n    height: \"100px\",\n    fontSize: \"25px\",\n    fontWeight: \"bold\",\n    color:\"White\",\n    border:\"5px solid red\"\n  }\n};\n\nclass Game extends Component {\n\n  state = {\n    data: Data,\n    score: 0,\n    topScore: 0,\n  }\n  componentDidMount() {\n    this.setState({ data:Data });\n    // console.log(Data)\n  }\n  handleClick(index){\n    // console.log(\"CLICK\",event)\n    console.log(index);\n    // UPDATE COUNTER\n    let newData=this.state.data;\n    let gameOver=false;\n    if(newData[index].clicked){\n      gameOver=true;\n      console.log(\"*****Double clicked\");\n    }\n    newData[index].clicked=true;\n \n    // console.log(this.state.data)\n    if(gameOver){\n      //clear clicks\n      for(var i=0;i<newData.length;i++){\n        newData[i].clicked=false;\n      }\n    }\n    this.setState({ data:newData.sort(()=>  0.5 - Math.random()) });\n    this.props.updateScore(gameOver);\n  }\n\n  render() {  \n    return (\n      // <div>section</div>\n      <div>\n        {\n          this.state.data.map((item, index) =>\n            <img src={item.image} style={styles.cats} key={index} className=\"cats\" alt=\"cat\" height=\"120\" width=\"120\" onClick={() => this.handleClick(index) } />)\n        }\n      </div>\n    )\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./components/header\";\nimport Game from \"./components/game\";\n// import Tail from \"./components/tail\";\n\nclass App extends Component {\n  state = {\n    score:0,\n    topScore:0\n  }\n  updateScore = (finished => {\n    console.log(\"updateScore\",finished)\n    if(finished){\n     let newScore = this.state.topScore;\n     if(this.state.score>newScore){\n       newScore=this.state.score;\n     }\n     this.setState({topScore:newScore});\n     this.setState({score:0});\n    }\n    else{\n     let newScore = this.state.score + 1;\n     this.setState({score:newScore});\n    }\n  })\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Header score = {this.state.score} topScore={this.state.topScore}></Header>\n      <Game updateScore = {this.updateScore}></Game>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}